// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package product.proxies;

public class BrickCategory implements com.mendix.systemwideinterfaces.core.IEntityProxy
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject brickCategoryMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Product.BrickCategory";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Categories("Categories"),
		CategoryId("CategoryId"),
		_Id("_Id");

		private final java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public BrickCategory(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, entityName));
	}

	protected BrickCategory(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject brickCategoryMendixObject)
	{
		if (brickCategoryMendixObject == null) {
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		}
		if (!com.mendix.core.Core.isSubClassOf(entityName, brickCategoryMendixObject.getType())) {
			throw new java.lang.IllegalArgumentException(String.format("The given object is not a %s", entityName));
		}	

		this.brickCategoryMendixObject = brickCategoryMendixObject;
		this.context = context;
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 * @param context The context to be used
	 * @param mendixObject The Mendix object for the new instance
	 * @return a new instance of this proxy class
	 */
	public static product.proxies.BrickCategory initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new product.proxies.BrickCategory(context, mendixObject);
	}

	public static product.proxies.BrickCategory load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return product.proxies.BrickCategory.initialize(context, mendixObject);
	}

	public static java.util.List<product.proxies.BrickCategory> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		return com.mendix.core.Core.createXPathQuery(String.format("//%1$s%2$s", entityName, xpathConstraint))
			.execute(context)
			.stream()
			.map(obj -> product.proxies.BrickCategory.initialize(context, obj))
			.collect(java.util.stream.Collectors.toList());
	}

	/**
	 * @return value of Categories
	 */
	public final java.lang.String getCategories()
	{
		return getCategories(getContext());
	}

	/**
	 * @param context
	 * @return value of Categories
	 */
	public final java.lang.String getCategories(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Categories.toString());
	}

	/**
	 * Set value of Categories
	 * @param categories
	 */
	public final void setCategories(java.lang.String categories)
	{
		setCategories(getContext(), categories);
	}

	/**
	 * Set value of Categories
	 * @param context
	 * @param categories
	 */
	public final void setCategories(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String categories)
	{
		getMendixObject().setValue(context, MemberNames.Categories.toString(), categories);
	}

	/**
	 * @return value of CategoryId
	 */
	public final java.lang.Integer getCategoryId()
	{
		return getCategoryId(getContext());
	}

	/**
	 * @param context
	 * @return value of CategoryId
	 */
	public final java.lang.Integer getCategoryId(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.CategoryId.toString());
	}

	/**
	 * Set value of CategoryId
	 * @param categoryid
	 */
	public final void setCategoryId(java.lang.Integer categoryid)
	{
		setCategoryId(getContext(), categoryid);
	}

	/**
	 * Set value of CategoryId
	 * @param context
	 * @param categoryid
	 */
	public final void setCategoryId(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer categoryid)
	{
		getMendixObject().setValue(context, MemberNames.CategoryId.toString(), categoryid);
	}

	/**
	 * @return value of _Id
	 */
	public final java.lang.Long get_Id()
	{
		return get_Id(getContext());
	}

	/**
	 * @param context
	 * @return value of _Id
	 */
	public final java.lang.Long get_Id(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Long) getMendixObject().getValue(context, MemberNames._Id.toString());
	}

	/**
	 * Set value of _Id
	 * @param _id
	 */
	public final void set_Id(java.lang.Long _id)
	{
		set_Id(getContext(), _id);
	}

	/**
	 * Set value of _Id
	 * @param context
	 * @param _id
	 */
	public final void set_Id(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Long _id)
	{
		getMendixObject().setValue(context, MemberNames._Id.toString(), _id);
	}

	@java.lang.Override
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return brickCategoryMendixObject;
	}

	@java.lang.Override
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this) {
			return true;
		}
		if (obj != null && getClass().equals(obj.getClass()))
		{
			final product.proxies.BrickCategory that = (product.proxies.BrickCategory) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

  /**
   * Gives full name ("Module.Entity" name) of the type of the entity.
   *
   * @return the name
   */
	public static java.lang.String getType()
	{
		return entityName;
	}
}
