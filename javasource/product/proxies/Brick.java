// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package product.proxies;

public class Brick implements com.mendix.systemwideinterfaces.core.IEntityProxy
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject brickMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Product.Brick";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		BrickType("BrickType"),
		Cost("Cost"),
		BrickID("BrickID"),
		UnitsAvailable("UnitsAvailable"),
		Brick_BrickCategory("Product.Brick_BrickCategory");

		private final java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Brick(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, entityName));
	}

	protected Brick(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject brickMendixObject)
	{
		if (brickMendixObject == null) {
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		}
		if (!com.mendix.core.Core.isSubClassOf(entityName, brickMendixObject.getType())) {
			throw new java.lang.IllegalArgumentException(String.format("The given object is not a %s", entityName));
		}	

		this.brickMendixObject = brickMendixObject;
		this.context = context;
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 * @param context The context to be used
	 * @param mendixObject The Mendix object for the new instance
	 * @return a new instance of this proxy class
	 */
	public static product.proxies.Brick initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new product.proxies.Brick(context, mendixObject);
	}

	public static product.proxies.Brick load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return product.proxies.Brick.initialize(context, mendixObject);
	}

	public static java.util.List<product.proxies.Brick> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		return com.mendix.core.Core.createXPathQuery(String.format("//%1$s%2$s", entityName, xpathConstraint))
			.execute(context)
			.stream()
			.map(obj -> product.proxies.Brick.initialize(context, obj))
			.collect(java.util.stream.Collectors.toList());
	}

	/**
	 * @return value of BrickType
	 */
	public final java.lang.String getBrickType()
	{
		return getBrickType(getContext());
	}

	/**
	 * @param context
	 * @return value of BrickType
	 */
	public final java.lang.String getBrickType(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.BrickType.toString());
	}

	/**
	 * Set value of BrickType
	 * @param bricktype
	 */
	public final void setBrickType(java.lang.String bricktype)
	{
		setBrickType(getContext(), bricktype);
	}

	/**
	 * Set value of BrickType
	 * @param context
	 * @param bricktype
	 */
	public final void setBrickType(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String bricktype)
	{
		getMendixObject().setValue(context, MemberNames.BrickType.toString(), bricktype);
	}

	/**
	 * @return value of Cost
	 */
	public final java.math.BigDecimal getCost()
	{
		return getCost(getContext());
	}

	/**
	 * @param context
	 * @return value of Cost
	 */
	public final java.math.BigDecimal getCost(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.math.BigDecimal) getMendixObject().getValue(context, MemberNames.Cost.toString());
	}

	/**
	 * Set value of Cost
	 * @param cost
	 */
	public final void setCost(java.math.BigDecimal cost)
	{
		setCost(getContext(), cost);
	}

	/**
	 * Set value of Cost
	 * @param context
	 * @param cost
	 */
	public final void setCost(com.mendix.systemwideinterfaces.core.IContext context, java.math.BigDecimal cost)
	{
		getMendixObject().setValue(context, MemberNames.Cost.toString(), cost);
	}

	/**
	 * @return value of BrickID
	 */
	public final java.lang.Integer getBrickID()
	{
		return getBrickID(getContext());
	}

	/**
	 * @param context
	 * @return value of BrickID
	 */
	public final java.lang.Integer getBrickID(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.BrickID.toString());
	}

	/**
	 * Set value of BrickID
	 * @param brickid
	 */
	public final void setBrickID(java.lang.Integer brickid)
	{
		setBrickID(getContext(), brickid);
	}

	/**
	 * Set value of BrickID
	 * @param context
	 * @param brickid
	 */
	public final void setBrickID(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer brickid)
	{
		getMendixObject().setValue(context, MemberNames.BrickID.toString(), brickid);
	}

	/**
	 * @return value of UnitsAvailable
	 */
	public final java.lang.Integer getUnitsAvailable()
	{
		return getUnitsAvailable(getContext());
	}

	/**
	 * @param context
	 * @return value of UnitsAvailable
	 */
	public final java.lang.Integer getUnitsAvailable(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.UnitsAvailable.toString());
	}

	/**
	 * Set value of UnitsAvailable
	 * @param unitsavailable
	 */
	public final void setUnitsAvailable(java.lang.Integer unitsavailable)
	{
		setUnitsAvailable(getContext(), unitsavailable);
	}

	/**
	 * Set value of UnitsAvailable
	 * @param context
	 * @param unitsavailable
	 */
	public final void setUnitsAvailable(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer unitsavailable)
	{
		getMendixObject().setValue(context, MemberNames.UnitsAvailable.toString(), unitsavailable);
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of Brick_BrickCategory
	 */
	public final product.proxies.BrickCategory getBrick_BrickCategory() throws com.mendix.core.CoreException
	{
		return getBrick_BrickCategory(getContext());
	}

	/**
	 * @param context
	 * @return value of Brick_BrickCategory
	 * @throws com.mendix.core.CoreException
	 */
	public final product.proxies.BrickCategory getBrick_BrickCategory(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		product.proxies.BrickCategory result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Brick_BrickCategory.toString());
		if (identifier != null) {
			result = product.proxies.BrickCategory.load(context, identifier);
		}
		return result;
	}

	/**
	 * Set value of Brick_BrickCategory
	 * @param brick_brickcategory
	 */
	public final void setBrick_BrickCategory(product.proxies.BrickCategory brick_brickcategory)
	{
		setBrick_BrickCategory(getContext(), brick_brickcategory);
	}

	/**
	 * Set value of Brick_BrickCategory
	 * @param context
	 * @param brick_brickcategory
	 */
	public final void setBrick_BrickCategory(com.mendix.systemwideinterfaces.core.IContext context, product.proxies.BrickCategory brick_brickcategory)
	{
		if (brick_brickcategory == null) {
			getMendixObject().setValue(context, MemberNames.Brick_BrickCategory.toString(), null);
		} else {
			getMendixObject().setValue(context, MemberNames.Brick_BrickCategory.toString(), brick_brickcategory.getMendixObject().getId());
		}
	}

	@java.lang.Override
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return brickMendixObject;
	}

	@java.lang.Override
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this) {
			return true;
		}
		if (obj != null && getClass().equals(obj.getClass()))
		{
			final product.proxies.Brick that = (product.proxies.Brick) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

  /**
   * Gives full name ("Module.Entity" name) of the type of the entity.
   *
   * @return the name
   */
	public static java.lang.String getType()
	{
		return entityName;
	}
}
